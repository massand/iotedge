/* 
 * Key Service API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2020-02-02
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::rc::Rc;
use std::borrow::Borrow;
use std::borrow::Cow;

use hyper;
use serde_json;
use futures;
use futures::{Future, Stream};

use hyper::header::{Authorization, UserAgent};

use super::{Error, configuration};

pub struct KeyOperationsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> KeyOperationsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> KeyOperationsApiClient<C> {
        KeyOperationsApiClient {
            configuration: configuration,
        }
    }
}

pub trait KeyOperationsApi {
    fn sign(&self, api_version: &str, sign_payload: crate::models::SignRequest) -> Box<Future<Item = crate::models::SignResponse, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>KeyOperationsApi for KeyOperationsApiClient<C> {
    fn sign(&self, api_version: &str, sign_payload: crate::models::SignRequest) -> Box<dyn Future<Item = crate::models::SignResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::POST;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("api-version", &api_version.to_string())
            .finish();
        let uri_str = format!("/sign?{}", query);

        let uri = (configuration.uri_composer)(&configuration.base_path, &uri_str);
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::builder();
        req.method(method).uri(uri.unwrap());
        if let Some(ref user_agent) = configuration.user_agent {
        req.header(http::header::USER_AGENT, &**user_agent);
        }
        let req = req
        .body(hyper::Body::empty())
        .expect("could not build hyper::Request");

        // send request
        Box::new(
        configuration
        .client
        .request(req)
        .map_err(Error::from)
        .and_then(|resp| {
        let (http::response::Parts { status, .. }, body) = resp.into_parts();
        body.concat2()
        .and_then(move |body| Ok((status, body)))
        .map_err(Error::from)
        })
        .and_then(|(status, body)| {
        if status.is_success() {
        Ok(body)
        } else {
        Err(Error::from((status, &*body)))
        }
        })
        .and_then(|body| {
        let parsed: Result<crate::models::SignResponse, _> =
        serde_json::from_slice(&body);
        parsed.map_err(Error::from)
        }),
        )
    }

}
