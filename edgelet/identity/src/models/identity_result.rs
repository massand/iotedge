/*
 * Identity Service API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2020-02-02
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IdentityResult {
    /// The identity URI of the device in Edge.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    id: Option<String>,
    /// The generation ID of the device in IoT hub.
    #[serde(rename = "generationId", skip_serializing_if = "Option::is_none")]
    generation_id: Option<String>,
    /// The generation ID of the device in IoT hub.
    #[serde(rename = "managedBy", skip_serializing_if = "Option::is_none")]
    managed_by: Option<String>,
    #[serde(rename = "credentials")]
    credentials: crate::models::Credentials,
}

impl IdentityResult {
    pub fn new(credentials: crate::models::Credentials) -> IdentityResult {
        IdentityResult {
            id: None,
            generation_id: None,
            managed_by: None,
            credentials: credentials,
        }
    }

    pub fn set_id(&mut self, id: String) {
        self.id = Some(id);
    }

    pub fn with_id(mut self, id: String) -> IdentityResult {
        self.id = Some(id);
        self
    }

    pub fn id(&self) -> Option<&String> {
        self.id.as_ref()
    }

    pub fn reset_id(&mut self) {
        self.id = None;
    }

    pub fn set_generation_id(&mut self, generation_id: String) {
        self.generation_id = Some(generation_id);
    }

    pub fn with_generation_id(mut self, generation_id: String) -> IdentityResult {
        self.generation_id = Some(generation_id);
        self
    }

    pub fn generation_id(&self) -> Option<&String> {
        self.generation_id.as_ref()
    }

    pub fn reset_generation_id(&mut self) {
        self.generation_id = None;
    }

    pub fn set_managed_by(&mut self, managed_by: String) {
        self.managed_by = Some(managed_by);
    }

    pub fn with_managed_by(mut self, managed_by: String) -> IdentityResult {
        self.managed_by = Some(managed_by);
        self
    }

    pub fn managed_by(&self) -> Option<&String> {
        self.managed_by.as_ref()
    }

    pub fn reset_managed_by(&mut self) {
        self.managed_by = None;
    }

    pub fn set_credentials(&mut self, credentials: crate::models::Credentials) {
        self.credentials = credentials;
    }

    pub fn with_credentials(mut self, credentials: crate::models::Credentials) -> IdentityResult {
        self.credentials = credentials;
        self
    }

    pub fn credentials(&self) -> &crate::models::Credentials {
        &self.credentials
    }
}
